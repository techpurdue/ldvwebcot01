<?php


/**
 * Implementation of hook_preprocess_page().
 */
function sc_basic_preprocess_page(&$variables) {
  $path = drupal_get_path('module', 'sc_basic');
  drupal_add_css($path . '/styling/css/shortcodes.css', array('group' => CSS_THEME));
}

/**
* Implementation of hook_shortcode_info().
* Using same formatting as hook_filter_info()
*/
function sc_basic_shortcode_info() {
  $shortcodes = array();

  $shortcodes['col'] = array(
    'title' => t('Columns'),
    'description' => t('Simple columns in content'),
    'process callback' => 'sc_basic_columns',
    'tips callback' => 'sc_basic_columns_tips',
    'default settings' => array(),
    'attributes callback' => 'sc_basic_columns_attributes',
  );

  $shortcodes['button'] = array(
    'title' => t('Button'),
    'description' => t('creates a fancy button that links to somewhere.'),
    'process callback' => 'sc_basic_button',
    'tips callback' => 'sc_basic_button_tips',
    'default settings' => array(),
    'attributes callback' => 'sc_basic_button_attributes',
  );

  $shortcodes['box'] = array(
    'title' => t('Box'),
    'description' => t('Side-boxes, blockquotes and pullquotes'),
    'process callback' => 'sc_basic_box',
    'tips callback' => 'sc_basic_box_tips',
    'default settings' => array(),
    'attributes callback' => 'sc_basic_box_attributes',
  );

  $shortcodes['highlight'] = array(
    'title' => t('highlight'),
    'description' => t('highlight an inline text'),
    'process callback' => 'sc_basic_highlight',
    'tips callback' => 'sc_basic_highlight_tips',
    'default settings' => array(),
    'attributes callback' => 'sc_basic_highlight_attributes',
  );

  $shortcodes['divider'] = array(
    'title' => t('divider'),
    'description' => t('divider'),
    'process callback' => 'sc_basic_divider',
    'tips callback' => 'sc_basic_divider_tips',
    'default settings' => array(),
    'attributes callback' => 'sc_basic_divider_attributes',
  );

  $shortcodes['dropcap'] = array(
    'title' => t('dropcap'),
    'description' => t('dropcap shortcode'),
    'process callback' => 'sc_basic_dropcap',
    'tips callback' => 'sc_basic_dropcap_tips',
    'default settings' => array(),
  );

  $shortcodes['dropshadow'] = array(
    'title' => t('Drop Shadow'),
    'description' => t('Add drop shadow to element'),
    'process callback' => 'sc_basic_dropshadow',
    'tips callback' => 'sc_basic_dropshadow_tips',
    'default settings' => array(),
    'attributes callback' => 'sc_basic_dropshadow_attributes',
  );

  $shortcodes['social'] = array(
    'title' => t('Social links'),
    'description' => t('List of icons and links to social networks'),
    'process callback' => 'sc_basic_social',
    'tips callback' => 'sc_basic_social_tips',
    'default settings' => array(),
    'attributes callback' => 'sc_basic_social_attributes',
  );

  $shortcodes['contact'] = array(
    'title' => t('Contact information'),
    'description' => t('Icon list of contact info'),
    'process callback' => 'sc_basic_contact',
    'tips callback' => 'sc_basic_contact_tips',
    'default settings' => array(),
    'attributes callback' => 'sc_basic_contact_attributes',
  );

  $shortcodes['teaser'] = array(
    'title' => t('Teaser'),
    'description' => t('creates an emphasized teaser paragraph.'),
    'process callback' => 'sc_basic_teaser',
    'tips callback' => 'sc_basic_teaser_tips',
    'default settings' => array(),
  );

  $shortcodes['toggle'] = array(
    'title' => t('Toggle'),
    'description' => t('JQuery toggle content'),
    'process callback' => 'sc_basic_toggle',
    'tips callback' => 'sc_basic_toggle_tips',
    'default settings' => array(),
    'attributes callback' => 'sc_basic_toggle_attributes',
  );

  // $shortcodes['tabs'] = array(
  //   'title' => t('Tabs & Accordeons'),
  //   'description' => t('JQuery toggle content'),
  //   'process callback' => 'sc_basic_tabs',
  //   'tips callback' => 'sc_basic_tabs_tips',
  //   'default settings' => array(),
  // );

  // $shortcodes['tab-item'] = array(
  //   'title' => t('Tabs pane'),
  //   'description' => t('converts inner contents to a tab.'),
  //   'process callback' => 'sc_basic_tab_item',
  //   'tips callback' => 'sc_basic_tab_item_tips',
  //   'default settings' => array(),
  // );

  $shortcodes['icon-list'] = array(
    'title' => t('Icon list'),
    'description' => t('Lists with icons. Supports ul, ol and dl.'),
    'process callback' => 'sc_basic_icon_list',
    'tips callback' => 'sc_basic_icon_list_tips',
    'default settings' => array(),
  );

  return $shortcodes;
}

/** @file shortcodes.php
 *
 * Shortcode defenitions
 */

 /*============================================================================================*/
/* Contact_info Shortcode
/*============================================================================================*/

/**
 *
 * Display contact information such as Name, Email, ...
 * @param $attrs
 * @param $content
 */

function sc_basic_contact($attrs, $content = null) {
  extract(shortcode_attrs(array(
    'fullname' => '',
    'address' => '',
    'city' => '',
    'state' => '',
    'zip' => '',
    'country' => '',
    'phone' => '',
    'email' => '',
    ), $attrs));


  $items = array();
  $full_address = array();
  if ($fullname) $full_address[] = $fullname;
  if ($address) $full_address[] = $address;
  if ($city) $full_address[] = $city;
  if ($state) $full_address[] = $state;
  if ($zip) $full_address[] = $zip;
  if ($country) $full_address[] = $country;
  $items[] = array('data' => implode(', ', $full_address), 'class' => array('address'));
  if ($phone) $items[] = array('data' => $phone, 'class' => array('phone'));
  if ($email) $items[] = array('data' => $email, 'class' => array('email'));

  return theme('item_list',
    array(
      'items' => $items,
      'title' => NULL,
      'type' => 'ul',
      'attributes' => array('class' => array('contact-info'))
    )
  );
}

function sc_basic_contact_tips($format, $long) {
  $output = '[contact fullname="John Smith" address="Park lane 5" city="LA" state="California" zip="12345" phone="555-55-555" email="info@example.com"][/contact]';
  return $output;
}

function sc_basic_contact_attributes($form, $form_state) {
  $form['fullname'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#size' => 30,
    '#maxlength' => 30,
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'contact'),
      ),
    ),
  );
  $form['address'] = array(
    '#type' => 'textfield',
    '#title' => t('Address'),
    '#size' => 30,
    '#maxlength' => 30,
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'contact'),
      ),
    ),
  );
  $form['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#size' => 30,
    '#maxlength' => 30,
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'contact'),
      ),
    ),
  );
  $form['state'] = array(
    '#type' => 'textfield',
    '#title' => t('State / Province'),
    '#size' => 30,
    '#maxlength' => 30,
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'contact'),
      ),
    ),
  );
  $form['zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip / Postal code'),
    '#size' => 30,
    '#maxlength' => 30,
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'contact'),
      ),
    ),
  );
  $form['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone number'),
    '#size' => 30,
    '#maxlength' => 30,
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'contact'),
      ),
    ),
  );
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#size' => 30,
    '#maxlength' => 30,
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'contact'),
      ),
    ),
  );
  return $form;
}

function sc_basic_social($attrs, $content = null) {
  $attributes = array();
  $icon_path = drupal_get_path('module', 'sc_basic') . '/styling/icons/social/mono';
  $files = file_scan_directory($icon_path, '/\.(jpg|gif|png?)$/');
  asort($files);
  foreach ($files as $file) {
    $attributes[$file->name] = '';
  }
  shortcode_attrs($attributes, $attrs);
  if (isset($attrs['type'])) {
    $type = 'inline';
    unset($attrs['type']);
  }
  $items = array();

  foreach ($attrs as $name => $content) {
    if (strpos($content, '|')) {
      $content_array = explode('|', $content);
      $text = $content_array[1];
      $url = $content_array[0];
    }
    else {
      $url = $content;
      $text = FALSE;
    }
    $link = explode('|', $content);
    $items[] = array('data' => l($text, $url), 'class' => array($name), 'title' => ucfirst($name));
  }

  $classes = array('social-links');
  if (isset($type)) $classes[] = $type;

  return theme('item_list',
    array(
      'items' => $items,
      'title' => NULL,
      'type' => 'ul',
      'attributes' => array('class' => $classes)
    )
  );
}

function sc_basic_social_tips($format, $long) {
  $output = '[social type="inline" Skype="http://google.com" Twitter="http://google.com" Facebook="http://google.com" Drupal="http://google.com"][/social]';
  return $output;
}

function sc_basic_social_attributes($form, $form_state) {
  $icon_path = drupal_get_path('module', 'sc_basic') . '/styling/icons/social/mono';
  $files = file_scan_directory($icon_path, '/\.(jpg|gif|png?)$/');
  asort($files);
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Layout'),
    '#options' => array(
      '' => t('Stacked'),
      'inline' => t('Inline'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'social'),
      ),
    ),
  );
  foreach ($files as $file) {
    $bg_images[$file->uri] = $file->name;
    $form[$file->name] = array(
      '#type' => 'textfield',
      '#title' => $file->name,
      '#size' => 60,
      '#states' => array(
        'visible' => array(
          ':input[name="shortcode"]' => array('value' => 'social'),
        ),
      ),
    );
  }
  return $form;
}

/*============================================================================================*/
/* Columns
/*============================================================================================*/
function sc_basic_columns( $attrs, $content = null ) {
  extract(shortcode_attrs(array(
  'width'      => '',
  'align'      => '',
  'last'       => '',
  'clear'      => '',
  'class'      => '',
  ), $attrs));

  $classes = array();
  if ($last) $classes[] = 'col-last';
  if ($width) $classes[] = 'col-' . $width;
  if ($align == 'right') $classes[] = 'float-right';
  if ($align == 'center') $classes[] = 'align-center';
  if ($clear) $classes[] = 'clear-both';

  $classes = trim(implode(' ', $classes));

  return '<div class="' . $classes . '">' . $content . '</div>';
}

/**
 * Columns
 */

function sc_basic_columns_tips($format, $long) {
  $output = '[col width="1-2"]your[/col][col width="1-2" last=1]content[/col]';
  return $output;
}

function sc_basic_columns_attributes($form, $form_state) {
  $form['width'] = array(
    '#type' => 'select',
    '#title' => t('Column width'),
    '#options' => array(
      '' => t('Auto'),
      '1-8' => t('1/8'),
      '1-7' => t('1/7'),
      '1-6' => t('1/6'),
      '1-5' => t('1/5'),
      '1-4' => t('1/4'),
      '1-3' => t('1/3'),
      '1-2' => t('1/2'),
      '2-3' => t('2/3'),
      '3-4' => t('3/4'),
      '2-5' => t('2/5'),
      '3-5' => t('3/5'),
      '4-5' => t('4/5'),
      '5-6' => t('5/6'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'col'),
      ),
    ),
  );
  $form['align'] = array(
    '#type' => 'select',
    '#title' => t('Alignment of element'),
    '#options' => array(
      '' => t('Left'),
      'right' => t('Right'),
      'center' => t('Center'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'col'),
      ),
    ),
  );
  $form['clear'] = array(
    '#type' => 'select',
    '#title' => t('Float clearing'),
    '#options' => array(
      '' => t('None'),
      'clear-both' => t('Clear both'),
      'clear-left' => t('Clear left'),
      'clear-right' => t('Clear right'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'col'),
      ),
    ),
  );
  $form['last'] = array(
    '#type' => 'select',
    '#title' => t('Last column in row'),
    '#description' => t('If this columns is last in a row you need to check this'),
    '#options' => array(
      '' => 'No',
      1 => t('Last in row'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'col'),
      ),
    ),
  );
  return $form;
}

/**
 * Drop shadows
 */

function sc_basic_dropshadow( $attrs, $content = null ) {
  extract(shortcode_attrs(array(
  'type'      => '',
  ), $attrs));

  $classes = array();
  $classes[] = 'dropshadow';
  if ($type == '') $classes[] = 'raised';
  if ($type == 2) $classes[] = 'perspective';
  if ($type == 3) $classes[] = 'lifted';
  if ($type > 3) $classes[] = 'curved';
  if ($type == 4) $classes[] = 'curved-hz1';
  if ($type == 5) $classes[] = 'curved-hz2';
  if ($type == 6) $classes[] = 'curved-vt2';

  $classes = trim(implode(' ', $classes));

  return '<div class="' . $classes . '">' . $content . '</div>';
}

function sc_basic_dropshadow_tips($format, $long) {
  $output = '[dropshadow]your content[/dropshadow]';
  return $output;
}

function sc_basic_dropshadow_attributes($form, $form_state) {
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Drop shadow type'),
    '#options' => array(
      '' => t('Regular'),
      2 => t('Perspective'),
      3 => t('Lifted corners'),
      4 => t('Curve'),
      5 => t('Double curve'),
      6 => t('Side shadows'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'dropshadow'),
      ),
    ),
  );
  return $form;
}

/*============================================================================================*/
/* Divider Styles Shortcodes
/*============================================================================================*/
function sc_basic_divider($attrs, $content = null) {
  extract(shortcode_attrs(array(
    'type' => '',
    ), $attrs));

  $class = '';
  if ($type) $class = ' class="' . $type . '"';

  $output = '<hr' . $class . '>';
  if ($type == 'top') $output .= '<a class="hr-toplink" href="#top">' . t('Back to Top ↑') . '</a>';

  return $output;
}

function sc_basic_divider_tips($format, $long) {
  $output = '[divider type="invisible|top"][/divider]';
  return $output;
}

function sc_basic_divider_attributes($form, $form_state) {
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Divider style'),
    '#options' => array(
      '' => t('Regular'),
      'invisible' => t('Invisible'),
      'top' => t('Add "back to top" link'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'divider'),
      ),
    ),
  );
  return $form;
}


/*============================================================================================*/
/* Dropcaps Shortcodes
/*============================================================================================*/
function sc_basic_dropcap( $attrs, $content = null ) {
  $class = !empty($class) ? ' '.$class : '';
  return '<span class="dropcap">' . check_plain($content)  . '</span>';
}



function sc_basic_dropcap_tips($format, $long) {
  $output = '[dropcap]Y[/dropcap]our content...';
  return $output;
}

/*============================================================================================*/
/* Teaser Shortcodes
/*============================================================================================*/
function sc_basic_teaser( $attrs, $content = null ) {

  $type = !empty($type) && in_array($type, array('normal', 'large')) ? $type : 'normal';
  return '<p class="teaser">' . $content . '</p>';
}

function sc_basic_teaser_tips($format, $long) {
  $output = '[teaser]Your content[/teaser]';
  return $output;
}

/*============================================================================================*/
/* Button Shortcode
/*============================================================================================*/
function sc_basic_button( $attrs, $content = null ) {
  extract(shortcode_attrs(array(
  'url'        => '',
  'size'       => '',
  'background' => '',
  'text'       => '',
  'align'      => '',
  'target'     => '',
  'class'      => '',
  'width'      => '',
  'last'       => '',
  ), $attrs));

  $style = '';
  if ($background) $style .= "background-color: $background;";
  if ($text) $style .= "color: $text;";

  $classes = array();
  if ($width) $classes[] = 'col-' . $width;
  if ($last) $classes[] = 'col-last';
  $classes[] = 'sc-button';
  $classes[] = 'sc-button-' . $size;
  if ($align == 'right') $classes[] = 'float-right';
  if ($align == 'center') $classes[] = 'align-center';
  // $classes[] = !empty($class) ?  explode(' ', $class) : null;

  return l($content, $url, array(
    'attributes' => array(
      'class' => $classes,
      'style' => $style,
      'target' => $target,
    ),
    'html' => TRUE,
  )
  );
}

function sc_basic_button_tips($format, $long) {
  $output = '[button url="http://www.sooperthemes.com" background=Crimson text=Gold size="3" align="center" target="_blank" width="2-3"]2/3rds Button, centred[/button]';
  return $output;
}

function sc_basic_button_attributes($form, $form_state) {
  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('Link url'),
    '#size' => 30,
    '#maxlength' => 30,
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'button'),
      ),
    ),
  );
  $form['size'] = array(
    '#type' => 'select',
    '#title' => t('Button size'),
    '#options' => array(
      1 => t('size 1'),
      2 => t('size 2'),
      3 => t('size 3'),
      4 => t('size 4'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'button'),
      ),
    ),
  );
  $form['background'] = array(
    '#type' => 'textfield',
    '#title' => t('Optionally choose a custom background color'),
    '#description' => t('Must be a valid CSS color. <a href="http://css-tricks.com/snippets/css/named-colors-and-hex-equivalents/">List of named colors</a>.'),
    '#size' => 30,
    '#maxlength' => 30,
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'button'),
      ),
    ),
  );
  $form['text'] = array(
    '#type' => 'textfield',
    '#title' => t('Optionally choose a custom text color'),
    '#description' => t('Must be a valid CSS color.'),
    '#size' => 30,
    '#maxlength' => 30,
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'button'),
      ),
    ),
  );
  $form['align'] = array(
    '#type' => 'select',
    '#title' => t('Alignment of element'),
    '#options' => array(
      '' => t('Left'),
      'right' => t('Right'),
      'center' => t('Center'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'button'),
      ),
    ),
  );
  $form['target'] = array(
    '#type' => 'select',
    '#title' => t('Link target'),
    '#options' => array(
      '' => t('_self'),
      '_blank' => t('_blank'),
      '_parent' => t('_parent'),
      '_top' => t('_top'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'button'),
      ),
    ),
  );
  $form['width'] = array(
    '#type' => 'select',
    '#title' => t('Column width'),
    '#options' => array(
      '' => t('Auto'),
      '1-8' => t('1/8'),
      '1-7' => t('1/7'),
      '1-6' => t('1/6'),
      '1-5' => t('1/5'),
      '1-4' => t('1/4'),
      '1-3' => t('1/3'),
      '1-2' => t('1/2'),
      '2-3' => t('2/3'),
      '3-4' => t('3/4'),
      '2-5' => t('2/5'),
      '3-5' => t('3/5'),
      '4-5' => t('4/5'),
      '5-6' => t('5/6'),
      '100' => t('100'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'button'),
      ),
    ),
  );
  return $form;
}

/*============================================================================================*/
/* box Shortcode
/*============================================================================================*/
function sc_basic_box( $attrs, $content = null ) {
  extract(shortcode_attrs(array(
  'type'       => 1,
  'background' => '',
  'text'       => '',
  'align'      => '',
  'width'      => '',
  'last'      => '',
  'clear'      => '',
  'class'      => '',
  ), $attrs));

  $style = '';
  if ($background) $style .= "background-color: $background;";
  if ($text) $style .= "color: $text;";
  if ($clear) $style .= "clear: $clear;";

  if ($style) $style = ' style="' . $style . '"';

  $classes = array();
  if ($width) $classes[] = 'col-' . $width;
  if ($last) $classes[] = 'col-last';
  if ($type == 'quote') {
    $tag = 'blockquote';
    if (!$width) $classes[] = 'grid-1-2';
  } else {
    $tag = 'aside';
    $classes[] = 'block';
  }

  $classes[] = 'box';
  $classes[] = 'box-' . $type;
  if ($align == 'right') $classes[] = 'float-right';
  if ($align == 'center') $classes[] = 'align-center';
  $classes[] = !empty($class) ?  explode(' ', $class) : null;
  $classes = trim(implode(' ', $classes));

  return '<' . $tag . ' class="' . $classes . '"' . $style . '>' . $content . "</$tag>";
}

function sc_basic_box_tips($format, $long) {
  $output = '[box background=tomato text=white align=right width="1-4"]your content here[/box]';
  return $output;
}

function sc_basic_box_attributes($form, $form_state) {
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => array(
      1 => t('Normal'),
      'note' => t('Note'),
      'quote' => t('Blockquote'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'box'),
      ),
    ),
  );
  $form['align'] = array(
    '#type' => 'select',
    '#title' => t('Alignment of element'),
    '#options' => array(
      '' => t('Left'),
      'right' => t('Right'),
      'center' => t('Center'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'box'),
      ),
    ),
  );
  $form['width'] = array(
    '#type' => 'select',
    '#title' => t('Column width'),
    '#options' => array(
      '' => t('Auto'),
      '1-8' => t('1/8'),
      '1-7' => t('1/7'),
      '1-6' => t('1/6'),
      '1-5' => t('1/5'),
      '1-4' => t('1/4'),
      '1-3' => t('1/3'),
      '1-2' => t('1/2'),
      '2-3' => t('2/3'),
      '3-4' => t('3/4'),
      '2-5' => t('2/5'),
      '3-5' => t('3/5'),
      '4-5' => t('4/5'),
      '5-6' => t('5/6'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'box'),
      ),
    ),
  );
  $form['background'] = array(
    '#type' => 'textfield',
    '#title' => t('Optionally choose a custom background color'),
    '#description' => t('Must be a valid CSS color. <a href="http://css-tricks.com/snippets/css/named-colors-and-hex-equivalents/">List of named colors</a>.'),
    '#size' => 30,
    '#maxlength' => 30,
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'box'),
      ),
    ),
  );
  $form['text'] = array(
    '#type' => 'textfield',
    '#title' => t('Optionally choose a custom text color'),
    '#description' => t('Must be a valid CSS color.'),
    '#size' => 30,
    '#maxlength' => 30,
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'box'),
      ),
    ),
  );
  return $form;
}

/*============================================================================================*/
/* highlight Shortcode
/*============================================================================================*/
function sc_basic_highlight( $attrs, $content = null ) {
  extract(shortcode_attrs(array(
  'type'      => '',
  'background'      => '',
  'text'      => '',
  'class'      => '',
  ), $attrs));

  $style = '';
  if ($background) $style .= "background-color: $background;";
  if ($text) $style .= "color: $text;";

  if ($style) $style = ' style="' . $style . '"';

  $classes = array();
  $classes[] = ($type == 2) ?  'highlight2' : 'highlight';
  $classes[] = !empty($class) ?  explode(' ', $class) : null;
  $classes = trim(implode(' ', $classes));

  return '<span class="' . $classes . '"' . $style . '>' . $content . '</span>';
}

function sc_basic_highlight_tips($format, $long) {
  $output = '[highlight type=2 background="yellow" text="black"]your text here[/highlight]';
  return $output;
}

function sc_basic_highlight_attributes($form, $form_state) {
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Highlight style'),
    '#options' => array(
      '' => t('Normal highlight'),
      2 => t('Rounded highlight'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'highlight'),
      ),
    ),
  );
  $form['background'] = array(
    '#type' => 'textfield',
    '#title' => t('Optionally choose a custom background color'),
    '#description' => t('Must be a valid CSS color. <a href="http://css-tricks.com/snippets/css/named-colors-and-hex-equivalents/">List of named colors</a>.'),
    '#size' => 30,
    '#maxlength' => 30,
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'highlight'),
      ),
    ),
  );
  $form['text'] = array(
    '#type' => 'textfield',
    '#title' => t('Optionally choose a custom text color'),
    '#description' => t('Must be a valid CSS color.'),
    '#size' => 30,
    '#maxlength' => 30,
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'highlight'),
      ),
    ),
  );
  return $form;
}


/*============================================================================================*/
/* Jquery toggle content Shortcode
/*============================================================================================*/
function sc_basic_toggle( $attrs, $content = null ) {
  extract(shortcode_attrs(array(
  'title'      => '',
  'expanded'      => FALSE,
  ), $attrs));

  $classes = array();
  if ($expanded) {
    $classes[] = 'expanded';
  }
  else {
    $collapsed = ' default-collapsed';
  }

  $classes = implode(' ', $classes);

  $out =  '<div class="toggle' . $collapsed . '"><h3 class="' . $classes . '" onclick="$(this).toggleClass(\'expanded\').next().toggle(\'fast\');" ><a href="##">' . $title . '</a></h3>';
  $out .= '<div class="toggle-content clearfix">' . $content . '</div>';
  $out .= '</div>';

  return $out;
}


function sc_basic_toggle_tips($format, $long) {
  $output = '[toggle title="Show toggle shortcode"]Your content here[/toggle]';
  return $output;
}

function sc_basic_toggle_attributes($form, $form_state) {
  $form['expanded'] = array(
    '#type' => 'select',
    '#title' => t('Collapsed / Expanded'),
    '#options' => array(
      '' => t('Collapsed'),
      1 => t('Expanded'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'toggle'),
      ),
    ),
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('Must be a valid CSS color.'),
    '#size' => 60,
    '#maxlength' => 60,
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'toggle'),
      ),
    ),
  );
  return $form;
}

// Quicktabs implementation is currently now working well because I don't know how to populate
// Drupal.settings.quicktabs in a way that works well with caching.

// /*============================================================================================*/
// /* Jquery toggle content Shortcode
// /*============================================================================================*/
// function sc_basic_tabs( $attrs, $content = null ) {
//   extract(shortcode_attrs(array(
//   'type'      => '',
//   ), $attrs));

//   if (!function_exists('quicktabs_build_quicktabs')) {
//     drupal_set_message(t('You must enable the quicktabs module to use the tabs shortcode'), 'error');
//     return;
//   }

//   if (($type == 'accordion' OR $type == 'accordeon')) {
//     $settings = array(
//       'renderer' => 'accordion',
//       'options' => array (
//         'history' => 0,
//         'jquery_ui' => array(
//           'autoHeight' => 0,
//           'collapsible' => 0,
//         ),
//       ),
//     );
//   } else {
//     $settings = array();
//   }

//   global $shortcode_tabs_stack;
//   $output = drupal_render(quicktabs_build_quicktabs(rand(), $settings, $shortcode_tabs_stack));
//   $shortcode_tabs_stack = null;
//   return $output;
// }


// function sc_basic_tabs_tips($format, $long) {
//   $output = '[tabs][tab-item title="Your title"]Your content[/tab-item][tab-item title="Next title"]Next content[/tab-item][/tabs]';
//   return $output;
// }
// function sc_basic_tab_item( $attrs, $content = null ) {
//   extract(shortcode_attrs(array(
//   'title'      => '',
//   ), $attrs));

//   // Unfortunately there is currently no other way to pass arguments to the
//   // tabs function #lame
//   global $shortcode_tabs_stack;
//   if (!is_array($shortcode_tabs_stack)) $shortcode_tabs_stack = array();
//   $pane = array(
//     'title' => $title,
//     'contents' => array(
//       '#markup' => $content,
//     ),
//     'weight' => count($shortcode_tabs_stack),
//   );
//   $shortcode_tabs_stack[] = $pane;
// }


// function sc_basic_tabs_item_tips($format, $long) {
//   $output = '[tabs type=accordion][tab-item title="Your title"]Your content[/tab-item][tab-item title="Next title"]Next content[/tab-item][/tabs]';
//   return $output;
// }


/*============================================================================================*/
/* List style Shortcode
/*============================================================================================*/
function sc_basic_icon_list( $attrs, $content = null ) {

  extract(shortcode_attrs(array(
  'type'     => '',
  ), $attrs));


  $types = array('sc-arrow', 'sc-buoy', 'sc-calendar', 'sc-clock', 'sc-pin', 'sc-play', 'sc-skip', 'sc-thumb', 'sc-tick', 'sc-tick-grey', 'sc-warning');


  $type = trim(strtolower($type));
  $classes = array();
  $classes[] = 'sc-icon-list';
  if (in_array($type, $types)) $classes[] = $type;

  $classes = trim(implode(' ', $classes));
  $output = preg_replace("/<(ul|ol|dl)[a-z0-9\"'=\s-_]*?>/","<ul class=\"$classes\">", $content);

  return $output;
}

function sc_basic_icon_list_tips($format, $long) {
  $output = '[icon-list type=sc-arrow|sc-buoy||sc-calendar|sc-clock|sc-pin|sc-arrow|sc-play|sc-skip|sc-thumb|sc-tick|sc-tick-grey|sc-warning]your list here[/icon-list]';
  return $output;
}