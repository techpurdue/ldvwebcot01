<?php

/**
 * @file
 * Provides a live preview for the Entity Reference autocomplete widget.
 */

/**
 * Implements hook_field_widget_form_alter().
 */
function entityreference_live_preview_field_widget_form_alter(&$element, &$form_state, $context) {
  $counter = &drupal_static(__FUNCTION__, 0);
  $supported_widgets = module_invoke_all('entityreference_live_preview_supported_widgets');
  if ($context['field']['type'] == 'entityreference'
      && in_array($context['instance']['widget']['type'], $supported_widgets)
      && !empty($context['instance']['widget']['settings']['entityreference_live_preview']['enabled'])) {
    $class = 'entityreference-live-preview-id-' . $counter++;
    $element['#type'] = 'container';
    $element['#attributes']['class'][] = 'entityreference-live-preview-container';
    $element['#attributes']['class'][] = $class;
    $delta = $context['delta'];
    $field_name = $context['field']['field_name'];
    if (isset($form_state['values'][$field_name][$context['langcode']][$delta])) {
      $target_id = $form_state['values'][$field_name][$context['langcode']][$delta]['target_id'];
    }
    $entity_type = $context['instance']['entity_type'];
    $bundle = $context['instance']['bundle'];
    if (isset($context['items'][$delta]) || isset($target_id)) {
      if (!isset($target_id)) {
        $target_id = $context['items'][$delta]['target_id'];
      }
      $output = _entityreference_live_preview_render($entity_type, $bundle, $field_name, $target_id);
    }
    $output['#prefix'] = '<div class="entityreference-live-preview">';
    $output['#suffix'] = '</div>';
    $output['#attached']['js'][] = drupal_get_path('module', 'entityreference_live_preview') . '/entityreference_live_preview.js';
    $output['#attached']['js'][] = array(
      'data' => array(
        'entityreference_live_preview' => array(
          $class => array(
            'callback' => url("entityreference-live-preview/ajax/$entity_type/$bundle/$field_name"),
          ),
        ),
      ),
      'type' => 'setting',
    );
    $output['#weight'] = -1;
    $element['entityreference_live_preview'] = $output;
  }
}

/**
 * Implements hook_entityreference_live_preview_supported_widgets().
 *
 * @todo
 *   Find a better way to name this function.
 */
function entityreference_live_preview_entityreference_live_preview_supported_widgets() {
  return array(
    'entityreference_autocomplete',
    // See http://drupal.org/node/1295034
    'entityreference_autocomplete_deluxe',
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for field_ui_field_edit_form().
 */
function entityreference_live_preview_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  $supported_widgets = module_invoke_all('entityreference_live_preview_supported_widgets');
  if (in_array($form['#instance']['widget']['type'], $supported_widgets)) {
    if (isset($form['#instance']['widget']['settings']['entityreference_live_preview'])) {
      $settings = $form['#instance']['widget']['settings']['entityreference_live_preview'];
    }
    else {
      $settings = array(
        'enabled' => FALSE,
        'mode' => 'default',
      );
    }
    $entity_info = entity_get_info($form['#instance']['entity_type']);
    $options = array();
    foreach ($entity_info['view modes'] as $key => $values) {
      $options[$key] = $values['label'];
    }
    $form['instance']['widget']['settings']['entityreference_live_preview'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#title' => t('Live preview settings'),
      'enabled' => array(
        '#type' => 'checkbox',
        '#title' => t('Enable'),
        '#description' => t('Select this to enable the live preview functionality for this field.'),
        '#default_value' => $settings['enabled'],
      ),
      'mode' => array(
        '#type' => 'select',
        '#title' => t('View mode'),
        '#description' => t('Select the view mode to be used for generating the live preview.'),
        '#options' => array('default' => t('Default')) + $options,
        '#default_value' => $settings['mode'],
        '#states' => array(
          'visible' => array(
            ':input[name="instance[widget][settings][entityreference_live_preview][enabled]"]' => array('checked' => TRUE),
          ),
        ),
      ),
    );
  }
}

/**
 * Renders a single item from an entity reference field.
 *
 * The item is defined by the provided $target_id and the entity type derived
 * from the field's target_type.  The entity to which the field is attached
 * does not need to exist yet; this function can be called while creating it.
 */
function _entityreference_live_preview_render($entity_type, $bundle, $field_name, $target_id) {
  $entity_info = entity_get_info($entity_type);
  $entity = (object) array(
    $entity_info['entity keys']['bundle'] => $bundle,
  );
  $field_info = field_info_field($field_name);
  $instance_info = field_info_instance($entity_type, $field_name, $bundle);
  $display = $instance_info['widget']['settings']['entityreference_live_preview']['mode'];

  // The entityref_formatter module http://drupal.org/sandbox/katbailey/1361118
  // is a special case: if it receives fewer items to render than its
  // configured minimum, it will fill in the blanks from a view.  We don't want
  // that in this case, so we force it to use a minimum of 1.
  if ($instance_info['display'][$display]['type'] == 'entityref_formatter_list') {
    $display = $instance_info['display'][$display];
    $display['settings']['min_values'] = 1;
  }

  $item = array(
    'target_id' => $target_id,
    'target_type' => $field_info['settings']['target_type'],
  );
  return field_view_value($entity_type, $entity, $field_name, $item, $display);
}

/**
 * Implements hook_menu().
 */
function entityreference_live_preview_menu() {
  $items['entityreference-live-preview/ajax'] = array(
    'title' => 'Entity Reference Live Preview',
    'page callback' => 'entityreference_live_preview_ajax',
    // Correct access control will be enforced later by entityreference, when
    // rendering the field.
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * AJAX menu callback.
 */
function entityreference_live_preview_ajax($entity_type, $bundle, $field_name, $target_id) {
  $output = _entityreference_live_preview_render($entity_type, $bundle, $field_name, $target_id);
  $html = render($output);
  drupal_json_output($html);
}
